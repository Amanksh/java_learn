# SQL Practice – Questions 11–15 (PostgreSQL)
Paste each block into pgAdmin and run. Each question section includes a minimal dataset.

---

## Question 11 – Employees & Departments (highest-paid per department, managers, etc.)
```sql
-- Reset
DROP TABLE IF EXISTS employees CASCADE;
DROP TABLE IF EXISTS departments CASCADE;

-- Departments
CREATE TABLE departments (
  dept_id        INTEGER GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
  dept_name      TEXT NOT NULL UNIQUE,
  location       TEXT
);

-- Employees
CREATE TABLE employees (
  emp_id         INTEGER GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
  full_name      TEXT NOT NULL,
  title          TEXT,
  salary         NUMERIC(10,2) NOT NULL CHECK (salary >= 0),
  hired_at       DATE NOT NULL,
  dept_id        INTEGER REFERENCES departments(dept_id) ON DELETE SET NULL,
  manager_id     INTEGER REFERENCES employees(emp_id) ON DELETE SET NULL
);

-- Sample data
INSERT INTO departments (dept_name, location) VALUES
  ('Engineering', 'Bengaluru'),
  ('HR',          'Noida'),
  ('Sales',       'Mumbai'),
  ('Finance',     'Gurugram');

INSERT INTO employees (full_name, title, salary, hired_at, dept_id, manager_id) VALUES
  ('Aman Sharma',        'CTO',           2800000, '2020-01-15', (SELECT dept_id FROM departments WHERE dept_name='Engineering'), NULL),
  ('Pooja Nair',         'HR Head',       1800000, '2021-03-10', (SELECT dept_id FROM departments WHERE dept_name='HR'),        NULL),
  ('Rohit Gupta',        'Sales Director',2200000, '2019-08-01', (SELECT dept_id FROM departments WHERE dept_name='Sales'),     NULL),
  ('Meera Iyer',         'CFO',           3000000, '2018-04-05', (SELECT dept_id FROM departments WHERE dept_name='Finance'),   NULL),
  ('Dev Patel',          'SDE III',       1700000, '2022-02-20', (SELECT dept_id FROM departments WHERE dept_name='Engineering'), 1),
  ('Sara Khan',          'SDE II',        1300000, '2023-05-11', (SELECT dept_id FROM departments WHERE dept_name='Engineering'), 5),
  ('Arjun Mehta',        'HR Executive',   700000, '2022-11-01', (SELECT dept_id FROM departments WHERE dept_name='HR'),          2),
  ('Priya Singh',        'Accountant',     900000, '2021-07-18', (SELECT dept_id FROM departments WHERE dept_name='Finance'),     4),
  ('Varun Malhotra',     'Sales Exec',     800000, '2024-01-02', (SELECT dept_id FROM departments WHERE dept_name='Sales'),       3),
  ('Nisha Verma',        'Sales Exec',     950000, '2023-09-09', (SELECT dept_id FROM departments WHERE dept_name='Sales'),       3);
```

---

## Question 12 – Customers, Orders & Products (totals, monthly revenue, top products)
```sql
-- Reset
DROP TABLE IF EXISTS order_items CASCADE;
DROP TABLE IF EXISTS orders CASCADE;
DROP TABLE IF EXISTS products CASCADE;
DROP TABLE IF EXISTS customers CASCADE;

CREATE TABLE customers (
  customer_id   INTEGER GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
  customer_name TEXT NOT NULL,
  city          TEXT,
  created_at    DATE NOT NULL DEFAULT CURRENT_DATE
);

CREATE TABLE products (
  product_id    INTEGER GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
  product_name  TEXT NOT NULL,
  category      TEXT,
  unit_price    NUMERIC(10,2) NOT NULL CHECK (unit_price >= 0)
);

CREATE TABLE orders (
  order_id      INTEGER GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
  customer_id   INTEGER NOT NULL REFERENCES customers(customer_id) ON DELETE CASCADE,
  order_date    DATE NOT NULL,
  status        TEXT NOT NULL CHECK (status IN ('PLACED','SHIPPED','DELIVERED','CANCELLED'))
);

CREATE TABLE order_items (
  order_item_id INTEGER GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
  order_id      INTEGER NOT NULL REFERENCES orders(order_id) ON DELETE CASCADE,
  product_id    INTEGER NOT NULL REFERENCES products(product_id),
  quantity      INTEGER NOT NULL CHECK (quantity > 0),
  unit_price    NUMERIC(10,2) NOT NULL CHECK (unit_price >= 0)
);

-- Sample data
INSERT INTO customers (customer_name, city, created_at) VALUES
  ('Ananya Rao', 'Bengaluru', '2023-05-01'),
  ('Vikas Jain', 'Delhi',     '2023-06-15'),
  ('Neha Gupta', 'Mumbai',    '2024-01-10'),
  ('Karan Shah', 'Pune',      '2024-03-05');

INSERT INTO products (product_name, category, unit_price) VALUES
  ('Wireless Mouse', 'Electronics', 799.00),
  ('Mechanical Keyboard', 'Electronics', 3499.00),
  ('Notebook A5', 'Stationery', 99.00),
  ('Water Bottle 1L', 'Home', 299.00),
  ('USB-C Cable', 'Electronics', 249.00);

INSERT INTO orders (customer_id, order_date, status) VALUES
  (1, '2024-01-12', 'DELIVERED'),
  (1, '2024-02-03', 'DELIVERED'),
  (2, '2024-02-18', 'CANCELLED'),
  (3, '2024-03-20', 'SHIPPED'),
  (4, '2024-03-27', 'DELIVERED'),
  (2, '2024-04-01', 'PLACED');

INSERT INTO order_items (order_id, product_id, quantity, unit_price) VALUES
  (1, 1, 1, 799.00),
  (1, 5, 2, 249.00),
  (2, 2, 1, 3499.00),
  (3, 3, 5, 99.00),
  (4, 4, 2, 299.00),
  (5, 1, 2, 799.00),
  (6, 5, 3, 249.00);
```

---

## Question 13 – University (students, courses, enrollments, grades)
```sql
-- Reset
DROP TABLE IF EXISTS enrollments CASCADE;
DROP TABLE IF EXISTS courses CASCADE;
DROP TABLE IF EXISTS students CASCADE;
DROP TABLE IF EXISTS instructors CASCADE;

CREATE TABLE students (
  student_id  INTEGER GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
  full_name   TEXT NOT NULL,
  batch_year  INTEGER NOT NULL CHECK (batch_year BETWEEN 2015 AND 2035)
);

CREATE TABLE instructors (
  instructor_id INTEGER GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
  full_name     TEXT NOT NULL,
  dept          TEXT NOT NULL
);

CREATE TABLE courses (
  course_id   INTEGER GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
  code        TEXT NOT NULL UNIQUE,
  title       TEXT NOT NULL,
  credits     INTEGER NOT NULL CHECK (credits BETWEEN 1 AND 6),
  instructor_id INTEGER REFERENCES instructors(instructor_id) ON DELETE SET NULL
);

CREATE TABLE enrollments (
  enrollment_id INTEGER GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
  student_id    INTEGER NOT NULL REFERENCES students(student_id) ON DELETE CASCADE,
  course_id     INTEGER NOT NULL REFERENCES courses(course_id)  ON DELETE CASCADE,
  semester      TEXT NOT NULL CHECK (semester IN ('Spring','Summer','Fall','Winter')),
  year_offered  INTEGER NOT NULL CHECK (year_offered BETWEEN 2015 AND 2035),
  grade         TEXT CHECK (grade IN ('A','B','C','D','F', 'I'))
);

-- Sample data
INSERT INTO students (full_name, batch_year) VALUES
  ('Aarav Verma', 2022),
  ('Isha Kulkarni', 2023),
  ('Kabir Menon', 2021),
  ('Sanya Kapoor', 2022);

INSERT INTO instructors (full_name, dept) VALUES
  ('Prof. R. Srinivasan', 'CSE'),
  ('Dr. Meenal Joshi', 'ECE');

INSERT INTO courses (code, title, credits, instructor_id) VALUES
  ('CS101', 'Intro to Programming', 4, 1),
  ('CS201', 'Data Structures', 4, 1),
  ('EC110', 'Signals & Systems', 3, 2);

INSERT INTO enrollments (student_id, course_id, semester, year_offered, grade) VALUES
  (1, 1, 'Spring', 2024, 'A'),
  (1, 2, 'Fall',   2024, 'B'),
  (2, 1, 'Spring', 2024, 'A'),
  (3, 2, 'Spring', 2024, 'C'),
  (4, 3, 'Fall',   2024, 'B');
```

---

## Question 14 – Flights (airports, flights, tickets)
```sql
-- Reset
DROP TABLE IF EXISTS tickets CASCADE;
DROP TABLE IF EXISTS flights CASCADE;
DROP TABLE IF EXISTS airports CASCADE;
DROP TABLE IF EXISTS passengers CASCADE;

CREATE TABLE airports (
  airport_id   INTEGER GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
  iata_code    CHAR(3) UNIQUE NOT NULL,
  city         TEXT NOT NULL
);

CREATE TABLE passengers (
  passenger_id INTEGER GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
  full_name    TEXT NOT NULL
);

CREATE TABLE flights (
  flight_id    INTEGER GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
  flight_no    TEXT NOT NULL UNIQUE,
  origin_id    INTEGER NOT NULL REFERENCES airports(airport_id),
  dest_id      INTEGER NOT NULL REFERENCES airports(airport_id),
  depart_ts    TIMESTAMP NOT NULL,
  arrive_ts    TIMESTAMP NOT NULL,
  base_fare    NUMERIC(10,2) NOT NULL CHECK (base_fare >= 0)
);

CREATE TABLE tickets (
  ticket_id    INTEGER GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
  flight_id    INTEGER NOT NULL REFERENCES flights(flight_id) ON DELETE CASCADE,
  passenger_id INTEGER NOT NULL REFERENCES passengers(passenger_id) ON DELETE CASCADE,
  seat_class   TEXT NOT NULL CHECK (seat_class IN ('ECONOMY','PREMIUM','BUSINESS')),
  paid_amount  NUMERIC(10,2) NOT NULL CHECK (paid_amount >= 0),
  booked_at    TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP
);

-- Sample data
INSERT INTO airports (iata_code, city) VALUES
  ('DEL','Delhi'),
  ('BOM','Mumbai'),
  ('BLR','Bengaluru'),
  ('HYD','Hyderabad');

INSERT INTO passengers (full_name) VALUES
  ('Riya Sen'),
  ('Nitin Rao'),
  ('Mohit Jain');

INSERT INTO flights (flight_no, origin_id, dest_id, depart_ts, arrive_ts, base_fare) VALUES
  ('AI101', (SELECT airport_id FROM airports WHERE iata_code='DEL'), (SELECT airport_id FROM airports WHERE iata_code='BOM'), '2024-04-10 08:00', '2024-04-10 10:10', 4500.00),
  ('6E220', (SELECT airport_id FROM airports WHERE iata_code='BLR'), (SELECT airport_id FROM airports WHERE iata_code='DEL'), '2024-04-11 07:30', '2024-04-11 10:00', 5200.00),
  ('UK330', (SELECT airport_id FROM airports WHERE iata_code='HYD'), (SELECT airport_id FROM airports WHERE iata_code='BLR'), '2024-04-12 18:45', '2024-04-12 19:55', 2800.00);

INSERT INTO tickets (flight_id, passenger_id, seat_class, paid_amount, booked_at) VALUES
  (1, 1, 'ECONOMY', 4800.00, '2024-03-20 12:00'),
  (1, 2, 'BUSINESS',12000.00, '2024-03-22 09:30'),
  (2, 3, 'ECONOMY', 5400.00, '2024-03-25 15:15'),
  (3, 1, 'PREMIUM', 3800.00, '2024-04-01 10:10');
```

---

## Question 15 – Social App (users, posts, comments, likes)
```sql
-- Reset
DROP TABLE IF EXISTS likes CASCADE;
DROP TABLE IF EXISTS comments CASCADE;
DROP TABLE IF EXISTS posts CASCADE;
DROP TABLE IF EXISTS app_users CASCADE;

CREATE TABLE app_users (
  user_id     INTEGER GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
  handle      TEXT NOT NULL UNIQUE,
  full_name   TEXT NOT NULL,
  joined_at   DATE NOT NULL DEFAULT CURRENT_DATE
);

CREATE TABLE posts (
  post_id     INTEGER GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
  user_id     INTEGER NOT NULL REFERENCES app_users(user_id) ON DELETE CASCADE,
  content     TEXT NOT NULL,
  created_at  TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE comments (
  comment_id  INTEGER GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
  post_id     INTEGER NOT NULL REFERENCES posts(post_id) ON DELETE CASCADE,
  user_id     INTEGER NOT NULL REFERENCES app_users(user_id) ON DELETE CASCADE,
  content     TEXT NOT NULL,
  created_at  TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE likes (
  like_id     INTEGER GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
  post_id     INTEGER REFERENCES posts(post_id) ON DELETE CASCADE,
  comment_id  INTEGER REFERENCES comments(comment_id) ON DELETE CASCADE,
  user_id     INTEGER NOT NULL REFERENCES app_users(user_id) ON DELETE CASCADE,
  created_at  TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  CHECK ( (post_id IS NOT NULL) <> (comment_id IS NOT NULL) ) -- like on either post OR comment
);

-- Sample data
INSERT INTO app_users (handle, full_name, joined_at) VALUES
  ('@aman',   'Aman Kush', '2024-06-01'),
  ('@neha',   'Neha Gupta','2024-06-05'),
  ('@rohan',  'Rohan Das', '2024-06-07');

INSERT INTO posts (user_id, content, created_at) VALUES
  (1, 'Hello SQL world!', '2024-07-01 09:00'),
  (2, 'Window functions are cool.', '2024-07-02 10:15'),
  (3, 'CTEs make queries readable.', '2024-07-03 11:30');

INSERT INTO comments (post_id, user_id, content, created_at) VALUES
  (1, 2, 'Welcome!', '2024-07-01 09:30'),
  (1, 3, 'Nice to see you here.', '2024-07-01 10:00'),
  (2, 1, 'Absolutely agree.', '2024-07-02 10:45');

INSERT INTO likes (post_id, comment_id, user_id, created_at) VALUES
  (1, NULL, 2, '2024-07-01 09:05'),
  (1, NULL, 3, '2024-07-01 09:06'),
  (NULL, 1,  1, '2024-07-01 09:35'),
  (2, NULL, 1, '2024-07-02 10:20');
```
